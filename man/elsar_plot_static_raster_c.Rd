% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/elsar_plot_static_raster_c.R
\name{elsar_plot_static_raster_c}
\alias{elsar_plot_static_raster_c}
\title{Function to create a static plot from raster data with continuous data}
\usage{
elsar_plot_static_raster_c(
  raster_in,
  type = "ggplot_vector",
  background = NULL,
  extend_background = 0.05,
  custom_palette = NULL,
  plot_title = "",
  legend_title = NULL,
  color_map = "viridis",
  expand_plot = FALSE,
  raster_df_out = FALSE
)
}
\arguments{
\item{raster_in}{The \code{SpatRaster} file to be plotted.}

\item{type}{A character of the plot type. Either "ggplot_vector", "ggplot_raster" or "tmap".}

\item{background}{Requires a \code{SpatRaster} input (preferably with the same data as \code{raster_in}) to plot the background data.}

\item{extend_background}{A numerical value that allows to extent the background beyond the extent of \code{raster_in}. If extend_background <= 1, the lat and lon extend will be extended by the ratio provided (e.g. 0.05 will extend it by 5\%). If extend_background > 1 all sides will be extended by the absolute value provided.}

\item{custom_palette}{An optional custom palette for plotting. Default uses the \code{viridis} package.}

\item{plot_title}{An optional plot title.}

\item{legend_title}{An optional legend title.}

\item{color_map}{The name of the \code{viridis} palette to be used. Default is "viridis".}

\item{expand_plot}{logical. Whether to expand the plot, so there is not space betwen border and plot.}

\item{raster_df_out}{logical. Whether to return only the plot (FALSE) or also the data frame behind the plot (TRUE). Needed for \code{elsar_plot_distribution()}}
}
\value{
A \code{ggplot} or \code{tmap} object.
}
\description{
\code{elsar_plot_static_raster_c()} allows to plot continuous data from a \code{SpatRaster} in \code{ggplot} or \code{tmap}. It can be combined with \code{\link[=elsar_plot_optics]{elsar_plot_optics()}} and \code{\link[=elsar_plot_extra_data]{elsar_plot_extra_data()}} to create reproducible plots.
}
\examples{
boundary_proj <- make_boundary(
  boundary_in = boundary_dat,
  iso3 = "NPL",
  iso3_column = "iso3cd"
)

pus <- make_planning_units(
  boundary_proj = boundary_proj,
  pu_size = NULL,
  pu_threshold = 8.5e5,
  limit_to_mainland = FALSE
)
wad_dat <- get_wad_data()

wadOut <- make_normalised_raster(
  raster_in = wad_dat,
  pus = pus,
  iso3 = "NPL"
)
(wad_plot <- elsar_plot_static_raster_c(
  raster_in = wadOut,
  type = "ggplot_raster",
  background = wad_dat,
  legend_title = "wad"
))
}
